# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ReactionsCount {
  like: Int!
  dislike: Int!
  smile: Int!
  angry: Int!
  sad: Int!
  love: Int!
}

type UserConfigurationDetail {
  id: String!
  profileVisibility: ProfileVisibility!
  profileBackgroundColor1: String!
  profileBackgroundColor2: String!
  profileBackgroundLightAngle: Float!
  friendRequest_Email_Notification: Boolean
  friendRequest_App_Notification: Boolean
  postReactedTo_Email_Notification: Boolean
  postReactedTo_App_Notification: Boolean
  commentReactedTo_Email_Notification: Boolean
  commentReactedTo_App_Notification: Boolean
}

"""Different types of profile visibility"""
enum ProfileVisibility {
  PUBLIC
  ONLY_FRIENDS
  PRIVATE
}

type UserDetail {
  id: String!
  email: String
  firstName: String
  lastName: String
  username: String
  profilePictureUrl: String
  postsCount: Float
  commentsCount: Float
  reactions: ReactionsCount
  userConfiguration: UserConfigurationDetail
  joinedGroupsCount: Float
  banStrikesCount: Float
  sentNotificationsCount: Float
  filedReportsCount: Float
  receivedReportsCount: Float
  friendsCount: Float
  moderatedGroupsCount: Float
  createdGroupsCount: Float
  createdAt: DateTime
  updatedAt: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type CommentDetail {
  id: String!
  content: String!
  creator: UserDetail!
  postId: String!
  reactions: ReactionsCount
  reportsCount: Float
  strikesCount: Float
  createdAt: DateTime
  updatedAt: DateTime
  myReaction: ReactionType
}

"""Different types of reactions available"""
enum ReactionType {
  LIKE
  DISLIKE
  SMILE
  ANGRY
  SAD
  LOVE
}

type InterestDetail {
  id: String
  name: String
  postsCount: Int
  groupsCount: Int
}

type NotificationDetail {
  id: String!
  message: String
  isRead: Boolean
  creator: UserDetail!
  notificationType: NotificationType!
  createdAt: DateTime
  updatedAt: DateTime
}

"""Different types of notificaitons available"""
enum NotificationType {
  FRIEND_REQUEST
  REACTION
  COMMENT
  ACCEPTED_INTO_GROUP
  KICKED_OUT_OF_GROUP
  RECEIVED_BAN_STRIKE
  REPORT_ASSIGNED
  REPORT_SUBMITTED
  REPORT_REJECTED
  REPORT_CLOSED
}

type GroupDetail {
  id: String
  name: String
  interest: InterestDetail
  owner: UserDetail
  moderators: [UserDetail!]
  users: [UserDetail!]
  membersCount: Int
  postsCount: Int
}

type PostDetail {
  id: String!
  content: String!
  postPicture: String
  creator: UserDetail!
  commentsCount: Int
  reactions: ReactionsCount
  createdAt: DateTime
  updatedAt: DateTime
  interest: InterestDetail
  group: GroupDetail
  reportsCount: Int
  strikesCount: Int
  pinnedComment: CommentDetail
  isPinned: Boolean
  myReaction: ReactionType
}

type ReportDetail {
  id: String!
  reporter: UserDetail
  reportedUser: String
  reportedComment: String
  reportedPost: String
  reportMessage: String
  resolutionMessage: String
  reportStatus: ReportStatus!
  reportType: ReportType!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""Different types of report status"""
enum ReportStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

"""Different types of reports available"""
enum ReportType {
  SPAM
  ABUSE
  INAPPROPRIATE_CONTENT
  HARASSMENT
  OTHER
}

type GenericResponse {
  message: String
  result: Boolean
  currentUserIsReceiver: Boolean
}

type SignInResponse {
  accessToken: String!
  refreshToken: String!
  userData: UserDetail!
}

type PaginatedCommentsListResponse {
  total: Int
  page: Int
  limit: Int
  items: [CommentDetail!]
}

type PaginatedInterestsListResponse {
  total: Int
  page: Int
  limit: Int
  items: [InterestDetail!]
}

type PaginatedNotificationsResponse {
  total: Int
  page: Int
  limit: Int
  items: [NotificationDetail!]
}

type PostGraphDataDto {
  period: String!
  count: Int!
}

type PaginatedPostsListResponse {
  total: Int
  page: Int
  limit: Int
  items: [PostDetail!]
}

type PaginatedUserReactionsResponse {
  total: Int
  page: Int
  limit: Int
  items: [ReactedItemUnion!]
}

union ReactedItemUnion = PostDetail | CommentDetail

type PaginatedReportsListResponse {
  total: Int
  page: Int
  limit: Int
  items: [ReportDetail!]
}

type PaginatedUsersResponse {
  total: Int
  page: Int
  limit: Int
  items: [UserDetail!]
}

type Query {
  hello: String!
  GetUnreadNotificationsCount: Float!
  GetNotifications(page: Int! = 1, limit: Int! = 10): PaginatedNotificationsResponse!
  GetReports(userId: String!, page: Int = 1, limit: Int = 10): PaginatedReportsListResponse!
  GetInterests(page: Int! = 1, limit: Int! = 10, interestId: String): PaginatedInterestsListResponse!
  getUserReactions(userId: String!, page: Int = 1, limit: Int = 10): PaginatedUserReactionsResponse!
  getCommentsList(page: Int!, limit: Int!, creatorId: String, postId: String, commentId: String): PaginatedCommentsListResponse!
  getPostsStatistics(filter: GraphFilter!, year: Int, weekNumber: Int): [PostGraphDataDto!]!
  getPosts(page: Int!, limit: Int!, creatorId: String, postId: String, interestId: String, groupId: String): PaginatedPostsListResponse!
  getUsers(page: Int! = 1, limit: Int! = 10, userId: String, groupId: String, getAll: Boolean, search: String, friendOf: String): PaginatedUsersResponse!
  GetUserConfiguration(userId: String!): UserConfigurationDetail!
  GetUserIsFriend(userId: String!): GenericResponse!
  GetFriendRequest(userId: String!): NotificationDetail
}

"""Filter options for the graph data"""
enum GraphFilter {
  Day
  Month
  Year
}

type Mutation {
  CreateReport(createReportDto: ReportDto!): GenericResponse!
  SignInAdmin(signIn: SignInCredentials!): SignInResponse!
  CreateAdmin(createAdminDto: CreateAdminDto!): GenericResponse!
  createGroup(createGroupDto: CreateGroupDto!): GenericResponse!
  AddReaction(createOrUpdateReactionData: CreateOrUpdateReactionDto!): GenericResponse!
  CreateComment(createComment: CreateCommentDto!): GenericResponse!
  PinComment(postId: String!, commentId: String!): GenericResponse!
  CreatePost(createPost: CreatePostDto!): GenericResponse!
  SignInUser(signInUser: SignInCredentials!): SignInResponse!
  SignUpUser(signUp: SignUpUserData!): GenericResponse!
  refreshToken(refreshToken: String!): SignInResponse!
  SignOutUser(userId: String!): GenericResponse!
  forgotPassword(email: String!): GenericResponse!
  resetPassword(resetPassword: ResetPasswordInput!): GenericResponse!
  UpdateUserConfiguration(updateDto: UpdateUserConfigurationDto!): GenericResponse!
  AddFriendRequest(addFriendDto: NotificationDto!): GenericResponse!
  UpdateFriend(userId: String!): GenericResponse!
}

input ReportDto {
  reportType: ReportType!
  message: String!
  reportedPostId: String
  reportedCommentId: String
  reportedUserId: String
}

input SignInCredentials {
  password: String!
  passwordRepeat: String!
  email: String!
}

input CreateAdminDto {
  username: String!
  email: String!
  password: String!
  adminRole: AdminRole! = MODERATOR
}

"""Different types of roles available"""
enum AdminRole {
  MODERATOR
  SUPERVISOR
  ADMINISTRATOR
  ADMIN
  SUPER_ADMIN
}

input CreateGroupDto {
  name: String!
  interestId: String!
}

input CreateOrUpdateReactionDto {
  reactionType: ReactionType!
  targetId: String!
  targetType: ReactionTargetType!
}

"""Target type for the reaction, either POST or COMMENT"""
enum ReactionTargetType {
  POST
  COMMENT
}

input CreateCommentDto {
  postId: String!
  content: String!
}

input CreatePostDto {
  content: String!
  interestId: String
  groupId: String
}

input SignUpUserData {
  firstName: String!
  lastName: String!
  password: String!
  repeatPassword: String!
  email: String!
}

input ResetPasswordInput {
  email: String!
  token: String!
  newPassword: String!
  repeatPassword: String!
}

input UpdateUserConfigurationDto {
  profileBackgroundColor1: String
  profileBackgroundColor2: String
  profileBackgroundLightAngle: Float
  profileVisibility: ProfileVisibility
  friendRequest_Email_Notification: Boolean
  friendRequest_App_Notification: Boolean
  postReactedTo_Email_Notification: Boolean
  postReactedTo_App_Notification: Boolean
  commentReactedTo_Email_Notification: Boolean
  commentReactedTo_App_Notification: Boolean
}

input NotificationDto {
  notificationId: String
  receiverId: String
  message: String
  type: NotificationType = FRIEND_REQUEST
}