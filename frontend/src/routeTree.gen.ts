/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SearchImport } from './routes/search'
import { Route as ProfileImport } from './routes/profile'
import { Route as HomeImport } from './routes/home'
import { Route as ProfileIdImport } from './routes/profile/$id'
import { Route as PostIdImport } from './routes/post/$id'
import { Route as AuthenticationSignUpImport } from './routes/_authentication/sign-up'
import { Route as AuthenticationSignInImport } from './routes/_authentication/sign-in'
import { Route as AuthenticationForgottenPasswordImport } from './routes/_authentication/forgotten-password'
import { Route as ProfileIdFriendsImport } from './routes/profile/$id.friends'

// Create/Update Routes

const SearchRoute = SearchImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRoute,
} as any)

const ProfileRoute = ProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any)

const HomeRoute = HomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRoute,
} as any)

const ProfileIdRoute = ProfileIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => ProfileRoute,
} as any)

const PostIdRoute = PostIdImport.update({
  id: '/post/$id',
  path: '/post/$id',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticationSignUpRoute = AuthenticationSignUpImport.update({
  id: '/_authentication/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticationSignInRoute = AuthenticationSignInImport.update({
  id: '/_authentication/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticationForgottenPasswordRoute =
  AuthenticationForgottenPasswordImport.update({
    id: '/_authentication/forgotten-password',
    path: '/forgotten-password',
    getParentRoute: () => rootRoute,
  } as any)

const ProfileIdFriendsRoute = ProfileIdFriendsImport.update({
  id: '/friends',
  path: '/friends',
  getParentRoute: () => ProfileIdRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileImport
      parentRoute: typeof rootRoute
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchImport
      parentRoute: typeof rootRoute
    }
    '/_authentication/forgotten-password': {
      id: '/_authentication/forgotten-password'
      path: '/forgotten-password'
      fullPath: '/forgotten-password'
      preLoaderRoute: typeof AuthenticationForgottenPasswordImport
      parentRoute: typeof rootRoute
    }
    '/_authentication/sign-in': {
      id: '/_authentication/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof AuthenticationSignInImport
      parentRoute: typeof rootRoute
    }
    '/_authentication/sign-up': {
      id: '/_authentication/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof AuthenticationSignUpImport
      parentRoute: typeof rootRoute
    }
    '/post/$id': {
      id: '/post/$id'
      path: '/post/$id'
      fullPath: '/post/$id'
      preLoaderRoute: typeof PostIdImport
      parentRoute: typeof rootRoute
    }
    '/profile/$id': {
      id: '/profile/$id'
      path: '/$id'
      fullPath: '/profile/$id'
      preLoaderRoute: typeof ProfileIdImport
      parentRoute: typeof ProfileImport
    }
    '/profile/$id/friends': {
      id: '/profile/$id/friends'
      path: '/friends'
      fullPath: '/profile/$id/friends'
      preLoaderRoute: typeof ProfileIdFriendsImport
      parentRoute: typeof ProfileIdImport
    }
  }
}

// Create and export the route tree

interface ProfileIdRouteChildren {
  ProfileIdFriendsRoute: typeof ProfileIdFriendsRoute
}

const ProfileIdRouteChildren: ProfileIdRouteChildren = {
  ProfileIdFriendsRoute: ProfileIdFriendsRoute,
}

const ProfileIdRouteWithChildren = ProfileIdRoute._addFileChildren(
  ProfileIdRouteChildren,
)

interface ProfileRouteChildren {
  ProfileIdRoute: typeof ProfileIdRouteWithChildren
}

const ProfileRouteChildren: ProfileRouteChildren = {
  ProfileIdRoute: ProfileIdRouteWithChildren,
}

const ProfileRouteWithChildren =
  ProfileRoute._addFileChildren(ProfileRouteChildren)

export interface FileRoutesByFullPath {
  '/home': typeof HomeRoute
  '/profile': typeof ProfileRouteWithChildren
  '/search': typeof SearchRoute
  '/forgotten-password': typeof AuthenticationForgottenPasswordRoute
  '/sign-in': typeof AuthenticationSignInRoute
  '/sign-up': typeof AuthenticationSignUpRoute
  '/post/$id': typeof PostIdRoute
  '/profile/$id': typeof ProfileIdRouteWithChildren
  '/profile/$id/friends': typeof ProfileIdFriendsRoute
}

export interface FileRoutesByTo {
  '/home': typeof HomeRoute
  '/profile': typeof ProfileRouteWithChildren
  '/search': typeof SearchRoute
  '/forgotten-password': typeof AuthenticationForgottenPasswordRoute
  '/sign-in': typeof AuthenticationSignInRoute
  '/sign-up': typeof AuthenticationSignUpRoute
  '/post/$id': typeof PostIdRoute
  '/profile/$id': typeof ProfileIdRouteWithChildren
  '/profile/$id/friends': typeof ProfileIdFriendsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/home': typeof HomeRoute
  '/profile': typeof ProfileRouteWithChildren
  '/search': typeof SearchRoute
  '/_authentication/forgotten-password': typeof AuthenticationForgottenPasswordRoute
  '/_authentication/sign-in': typeof AuthenticationSignInRoute
  '/_authentication/sign-up': typeof AuthenticationSignUpRoute
  '/post/$id': typeof PostIdRoute
  '/profile/$id': typeof ProfileIdRouteWithChildren
  '/profile/$id/friends': typeof ProfileIdFriendsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/home'
    | '/profile'
    | '/search'
    | '/forgotten-password'
    | '/sign-in'
    | '/sign-up'
    | '/post/$id'
    | '/profile/$id'
    | '/profile/$id/friends'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/home'
    | '/profile'
    | '/search'
    | '/forgotten-password'
    | '/sign-in'
    | '/sign-up'
    | '/post/$id'
    | '/profile/$id'
    | '/profile/$id/friends'
  id:
    | '__root__'
    | '/home'
    | '/profile'
    | '/search'
    | '/_authentication/forgotten-password'
    | '/_authentication/sign-in'
    | '/_authentication/sign-up'
    | '/post/$id'
    | '/profile/$id'
    | '/profile/$id/friends'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  HomeRoute: typeof HomeRoute
  ProfileRoute: typeof ProfileRouteWithChildren
  SearchRoute: typeof SearchRoute
  AuthenticationForgottenPasswordRoute: typeof AuthenticationForgottenPasswordRoute
  AuthenticationSignInRoute: typeof AuthenticationSignInRoute
  AuthenticationSignUpRoute: typeof AuthenticationSignUpRoute
  PostIdRoute: typeof PostIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  HomeRoute: HomeRoute,
  ProfileRoute: ProfileRouteWithChildren,
  SearchRoute: SearchRoute,
  AuthenticationForgottenPasswordRoute: AuthenticationForgottenPasswordRoute,
  AuthenticationSignInRoute: AuthenticationSignInRoute,
  AuthenticationSignUpRoute: AuthenticationSignUpRoute,
  PostIdRoute: PostIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/home",
        "/profile",
        "/search",
        "/_authentication/forgotten-password",
        "/_authentication/sign-in",
        "/_authentication/sign-up",
        "/post/$id"
      ]
    },
    "/home": {
      "filePath": "home.tsx"
    },
    "/profile": {
      "filePath": "profile.tsx",
      "children": [
        "/profile/$id"
      ]
    },
    "/search": {
      "filePath": "search.tsx"
    },
    "/_authentication/forgotten-password": {
      "filePath": "_authentication/forgotten-password.tsx"
    },
    "/_authentication/sign-in": {
      "filePath": "_authentication/sign-in.tsx"
    },
    "/_authentication/sign-up": {
      "filePath": "_authentication/sign-up.tsx"
    },
    "/post/$id": {
      "filePath": "post/$id.tsx"
    },
    "/profile/$id": {
      "filePath": "profile/$id.tsx",
      "parent": "/profile",
      "children": [
        "/profile/$id/friends"
      ]
    },
    "/profile/$id/friends": {
      "filePath": "profile/$id.friends.tsx",
      "parent": "/profile/$id"
    }
  }
}
ROUTE_MANIFEST_END */
